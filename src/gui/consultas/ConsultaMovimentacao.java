package gui.consultas;

import dao.MovimentacaoDAO;
import dao.ProdutoDAO;
import gui.Navegacao;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import modelo.Movimentacao;
import modelo.Produto;

public class ConsultaMovimentacao extends javax.swing.JFrame {

    public ConsultaMovimentacao() {
        initComponents();
        cbData.setVisible(false);

        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowActivated(java.awt.event.WindowEvent evt) {
                LoadMovimentacoes();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMov = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        cbTipo = new javax.swing.JComboBox<>();
        fieldBusca = new javax.swing.JTextField();
        btnVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnGerarCSV = new javax.swing.JButton();
        cbData = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1000, 1000));
        setMinimumSize(new java.awt.Dimension(700, 700));
        setPreferredSize(new java.awt.Dimension(985, 576));

        tabelaMov.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Tipo", "Produto", "Data", "Hora", "Quantidade", "Responsável"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMov.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaMov);
        if (tabelaMov.getColumnModel().getColumnCount() > 0) {
            tabelaMov.getColumnModel().getColumn(0).setResizable(false);
            tabelaMov.getColumnModel().getColumn(1).setResizable(false);
            tabelaMov.getColumnModel().getColumn(2).setResizable(false);
            tabelaMov.getColumnModel().getColumn(3).setResizable(false);
            tabelaMov.getColumnModel().getColumn(4).setResizable(false);
            tabelaMov.getColumnModel().getColumn(5).setResizable(false);
            tabelaMov.getColumnModel().getColumn(6).setResizable(false);
        }

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Usuario", "Data", "Produto" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Movimentações");

        btnGerarCSV.setText("Gerar Relatório");
        btnGerarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarCSVActionPerformed(evt);
            }
        });

        cbData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ultimo dia", "Ultima semana", "Ultimos 30 dias", "Ultimo semestre", "Ultimo Ano" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 415, Short.MAX_VALUE)
                        .addComponent(btnGerarCSV))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVoltar)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnVoltar))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGerarCSV)
                    .addComponent(cbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void LoadMovimentacoes() {
        try {
            MovimentacaoDAO dao = new MovimentacaoDAO();
            List<Movimentacao> movimentacoes = dao.listar();

            DefaultTableModel DFT = (DefaultTableModel) tabelaMov.getModel();
            DFT.setRowCount(0);

            for (Movimentacao movimentacao : movimentacoes) {
                DFT.addRow(new Object[]{movimentacao.getIdMov(), movimentacao.getTipo(), movimentacao.getNomeProduto(), movimentacao.getData(), movimentacao.getHora(), movimentacao.getQuantidade(), movimentacao.getUsuarioResponsavel()});
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar database: \n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }

    @SuppressWarnings("empty-statement")
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        List<Movimentacao> movimentacoes = new ArrayList<>();
        MovimentacaoDAO dao = new MovimentacaoDAO();

        switch (cbTipo.getSelectedIndex()) {
            case 0: {
                if (fieldBusca.getText().isBlank()) {
                    JOptionPane.showMessageDialog(null, "O campo de busca não pode estar vazio!");
                }
                movimentacoes = dao.consultarUsuario(fieldBusca.getText());
                try {
                    DefaultTableModel DFT = (DefaultTableModel) tabelaMov.getModel();
                    DFT.setRowCount(0);

                    for (Movimentacao m : movimentacoes) {
                        DFT.addRow(new Object[]{m.getIdMov(), m.getTipo(), m.getNomeProduto(), m.getData(), m.getHora(), m.getQuantidade(), m.getUsuarioResponsavel()});
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao buscar movimentação \n", "Erro", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            case 1: {
                movimentacoes = dao.consultDATA(cbData.getSelectedIndex());
                try {
                    DefaultTableModel DFT = (DefaultTableModel) tabelaMov.getModel();
                    DFT.setRowCount(0);

                    for (Movimentacao m : movimentacoes) {
                        DFT.addRow(new Object[]{m.getIdMov(), m.getTipo(), m.getNomeProduto(), m.getData(), m.getHora(), m.getQuantidade(), m.getUsuarioResponsavel()});
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao buscar movimentação \n", "Erro", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            case 2: {
                if (fieldBusca.getText().isBlank()) {
                    JOptionPane.showMessageDialog(null, "O campo de busca não pode estar vazio!");
                }
                movimentacoes = dao.consultPod(fieldBusca.getText());
                try {
                    DefaultTableModel DFT = (DefaultTableModel) tabelaMov.getModel();
                    DFT.setRowCount(0);

                    for (Movimentacao m : movimentacoes) {
                        DFT.addRow(new Object[]{m.getIdMov(), m.getTipo(), m.getNomeProduto(), m.getData(), m.getHora(), m.getQuantidade(), m.getUsuarioResponsavel()});
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao buscar movimentação \n", "Erro", JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
            default:
                LoadMovimentacoes();
                break;
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        if (cbTipo.getSelectedIndex() == 1) {
            fieldBusca.setVisible(false);
            cbData.setVisible(true);
            LoadMovimentacoes();
        } else {
            fieldBusca.setVisible(true);
            cbData.setVisible(false);
            LoadMovimentacoes();
        }
    }//GEN-LAST:event_cbTipoActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        Navegacao n = new Navegacao();
        n.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnGerarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarCSVActionPerformed
        // TODO add your handling code here:

        ProdutoDAO dao = new ProdutoDAO();
        List<Produto> ps = dao.listar();

        JFileChooser seletorArquivo = new JFileChooser();
        seletorArquivo.setDialogTitle("Salvar arquivo CSV");

        // Define um filtro para mostrar apenas arquivos .csv
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Arquivos CSV (*.csv)", "csv");
        seletorArquivo.setFileFilter(filtro);

        // Sugere um nome de arquivo padrão
        seletorArquivo.setSelectedFile(new File("produtos.csv"));

        // Abre a janela para o usuário escolher o local
        int userSelection = seletorArquivo.showSaveDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File arquivoParaSalvar = seletorArquivo.getSelectedFile();

            // Garante que o arquivo tenha a extensão .csv
            String caminhoArquivo = arquivoParaSalvar.getAbsolutePath();
            if (!caminhoArquivo.toLowerCase().endsWith(".csv")) {
                arquivoParaSalvar = new File(caminhoArquivo + ".csv");
            }

            System.out.println("Salvando o arquivo em: " + arquivoParaSalvar.getAbsolutePath());

            // Usa try-with-resources para garantir que o FileWriter feche automaticamente
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(arquivoParaSalvar))) {

                // --- AQUI VOCÊ ESCOLHE OS ATRIBUTOS ---
                // Escreve o cabeçalho do CSV (os títulos das colunas)
                writer.append("NOME");
                writer.append(",");
                writer.append("PROCEDÊNCIA");
                writer.append(",");
                writer.append("QUANTIDADE");
                writer.append("\n"); // Pula para a próxima linha

                // Itera sobre a lista de produtos
                for (Produto p : ps) {
                    // Escreve os dados de cada produto na ordem do cabeçalho
                    writer.append(p.getNome());
                    writer.append(",");
                    writer.append(p.getProcedencia());
                    writer.append(",");
                    writer.append(String.valueOf(p.getQuantidade()));
                    writer.append("\n");
                }

                System.out.println("Arquivo CSV gerado com sucesso!");

            } catch (IOException e) {
                System.err.println("Ocorreu um erro ao escrever o arquivo CSV: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.out.println("Operação de salvar cancelada pelo usuário.");
        }
    }//GEN-LAST:event_btnGerarCSVActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGerarCSV;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cbData;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JTextField fieldBusca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaMov;
    // End of variables declaration//GEN-END:variables

}
