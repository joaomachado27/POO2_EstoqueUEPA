/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.consultas;

import dao.MovimentacaoDAO;
import dao.ProdutoDAO;
import gui.Navegacao;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import modelo.Movimentacao;
import modelo.Produto;


/**
 *
 * @author cacom
 */
public class ConsultaMovimentacao extends javax.swing.JFrame {

    /**
     * Creates new form ConsultasMov
     */
    public ConsultaMovimentacao() {
        initComponents();
        jComboBox2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMov = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        text = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        btnVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelaMov.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Tipo", "Produto", "Data", "Hora", "Quantidade", "Responsável"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMov.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaMov);
        if (tabelaMov.getColumnModel().getColumnCount() > 0) {
            tabelaMov.getColumnModel().getColumn(0).setResizable(false);
            tabelaMov.getColumnModel().getColumn(1).setResizable(false);
            tabelaMov.getColumnModel().getColumn(2).setResizable(false);
            tabelaMov.getColumnModel().getColumn(3).setResizable(false);
            tabelaMov.getColumnModel().getColumn(4).setResizable(false);
            tabelaMov.getColumnModel().getColumn(6).setResizable(false);
        }

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Usuario", "Data", "Produto" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ultimo dia", "Ultima semana", "Ultimos 30 dias", "Ultimo semestre", "Ultimo Ano" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Movimentações");

        jButton1.setText("Gerar Relatório");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(btnVoltar)
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVoltar)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        
        MovimentacaoDAO dao = new MovimentacaoDAO();
        
        List<Movimentacao> movs = new ArrayList<>();
        
        if (jComboBox1.getSelectedIndex() == 0) {
            movs = dao.consultarUsuario(text.getText());
        } else if (jComboBox1.getSelectedIndex() == 1) {
            
            movs = dao.consultDATA(jComboBox2.getSelectedIndex());
        } else if (jComboBox1.getSelectedIndex() == 2) {
            
            try{
            movs = dao.consultPod(Integer.parseInt(text.getText()));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Por favor utilize o id do Produto ao pesquisar");
            }
        }
        
        try {
            DefaultTableModel DFT = (DefaultTableModel) tabelaMov.getModel();
            DFT.setRowCount(0);
            for (Movimentacao m : movs) {
                DFT.addRow(new Object[]{ m.getIdMov(), m.getTipo(), m.getIdProduto(), m.getData(), m.getHora(), m.getQuantidade(), m.getUsuarioResponsavel()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar produto \n", "Erro", JOptionPane.ERROR_MESSAGE);
        } 
            
          
    
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedIndex() == 1) {
            text.setVisible(false);
            jComboBox2.setVisible(true);
        } else {
            text.setVisible(true);
            jComboBox2.setVisible(false);
            
        }
        
        for (int i=0;i==1;i++) {
        jComboBox1ActionPerformed(evt);
        DefaultTableModel DFT = (DefaultTableModel) tabelaMov.getModel();
            DFT.setRowCount(0);
    }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        Navegacao n = new Navegacao();
        n.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        ProdutoDAO dao = new ProdutoDAO();
        List<Produto> ps = dao.listar();
        
        JFileChooser seletorArquivo = new JFileChooser();
        seletorArquivo.setDialogTitle("Salvar arquivo CSV");
        
        // Define um filtro para mostrar apenas arquivos .csv
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Arquivos CSV (*.csv)", "csv");
        seletorArquivo.setFileFilter(filtro);
        
        // Sugere um nome de arquivo padrão
        seletorArquivo.setSelectedFile(new File("produtos.csv"));

        // Abre a janela para o usuário escolher o local
        int userSelection = seletorArquivo.showSaveDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File arquivoParaSalvar = seletorArquivo.getSelectedFile();
            
            // Garante que o arquivo tenha a extensão .csv
            String caminhoArquivo = arquivoParaSalvar.getAbsolutePath();
            if (!caminhoArquivo.toLowerCase().endsWith(".csv")) {
                arquivoParaSalvar = new File(caminhoArquivo + ".csv");
            }

            System.out.println("Salvando o arquivo em: " + arquivoParaSalvar.getAbsolutePath());

            // Usa try-with-resources para garantir que o FileWriter feche automaticamente
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(arquivoParaSalvar))) {
                
                // --- AQUI VOCÊ ESCOLHE OS ATRIBUTOS ---
                // Escreve o cabeçalho do CSV (os títulos das colunas)
                writer.append("NOME");
                writer.append(",");
                writer.append("PROCEDÊNCIA");
                writer.append(",");
                writer.append("QUANTIDADE");
                writer.append("\n"); // Pula para a próxima linha

                // Itera sobre a lista de produtos
                for (Produto p : ps) {
                    // Escreve os dados de cada produto na ordem do cabeçalho
                    writer.append(p.getNome()); 
                    writer.append(",");
                    writer.append(p.getProcedencia());
                    writer.append(",");
                    writer.append(  String.valueOf(p.getQuantidade()));
                    writer.append("\n"); 
                }

                System.out.println("Arquivo CSV gerado com sucesso!");

            } catch (IOException e) {
                System.err.println("Ocorreu um erro ao escrever o arquivo CSV: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.out.println("Operação de salvar cancelada pelo usuário.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaMov;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables

}